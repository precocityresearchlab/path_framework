# Docker Compose for PATH Framework Development

version: '3.8'

services:
  # Main PATH Framework application
  path-framework:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - path-venv:/app/.venv
    environment:
      - PYTHONPATH=/app
      - PATH_ENV=development
      - DATABASE_URL=postgresql://pathuser:pathpass@postgres:5432/pathdb
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"  # Web interface
      - "8001:8001"  # Agent API
    command: ["uv", "run", "path", "run", "--verbose"]
    networks:
      - path-network

  # PostgreSQL database for examples
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: pathdb
      POSTGRES_USER: pathuser
      POSTGRES_PASSWORD: pathpass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - path-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pathuser -d pathdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - path-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - path-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=pathpass
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - path-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - path-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - path-framework
      - grafana
    networks:
      - path-network

  # Documentation server
  docs:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    command: ["uv", "run", "mkdocs", "serve", "--dev-addr", "0.0.0.0:8080"]
    networks:
      - path-network

  # Example task management API
  task-api:
    build:
      context: ./examples/task_management_api
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://pathuser:pathpass@postgres:5432/taskdb
      - REDIS_URL=redis://redis:6379/1
      - JWT_SECRET=task-api-secret-key
    depends_on:
      - postgres
      - redis
    ports:
      - "3001:3000"
    networks:
      - path-network

  # Agent orchestrator service
  orchestrator:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - PATH_ENV=development
      - ORCHESTRATOR_PORT=8002
    ports:
      - "8002:8002"
    command: ["uv", "run", "path-orchestrator", "--port", "8002"]
    networks:
      - path-network

# Volumes for data persistence
volumes:
  path-venv:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Network for service communication
networks:
  path-network:
    driver: bridge

# Development override file (docker-compose.override.yml)
# This file is automatically loaded in development
---
version: '3.8'

services:
  path-framework:
    build:
      target: development
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - .:/app:cached
      - /app/.venv  # Anonymous volume for virtual environment

  postgres:
    environment:
      - POSTGRES_DB=pathdb_dev
    volumes:
      - ./scripts/dev-init.sql:/docker-entrypoint-initdb.d/dev-init.sql

  # Additional development services
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - path-network
