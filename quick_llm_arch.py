#!/usr/bin/env uv run python
"""
Quick LLM Architecture Generation
Simplified version to quickly generate architecture artifacts
"""

import asyncio
import os
import sys
from pathlib import Path

# Add the path framework to the Python path
sys.path.append(str(Path(__file__).parent))

from path_framework.core.llm_client import get_llm_client, LLMRequest


async def quick_architecture_generation():
    """Quick architecture generation with Gemma 3 27B"""
    
    print("🚀 Quick LLM Architecture Generation")
    print("=" * 40)
    
    try:
        # Get LLM client
        llm_client = get_llm_client(phase=1)
        print(f"✅ LLM Client: {type(llm_client).__name__}")
        
        # Simple architecture prompt
        prompt = """
        Generate a system architecture for a Helpdesk API project.
        
        Respond with 3 key components:
        1. Requirements (3 main functional requirements)
        2. Architecture (technology stack and main components)
        3. API Design (5 main endpoints)
        
        Keep each section brief and practical.
        """
        
        request = LLMRequest(
            prompt=prompt,
            temperature=0.2,
            max_tokens=600
        )
        
        print("\n📤 Sending request to Gemma 3 27B...")
        response = await llm_client.generate(request)
        
        print(f"\n✅ Response received! ({response.tokens_used} tokens)")
        print(f"🤖 Model: {response.model_used}")
        
        # Create output directory
        output_dir = Path("./projects/Helpdesk API/gemma_architecture")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Save the architecture
        architecture_file = output_dir / "architecture_design.md"
        with open(architecture_file, "w") as f:
            f.write(f"# Helpdesk API Architecture\n")
            f.write(f"Generated by: {response.model_used}\n")
            f.write(f"Date: {asyncio.get_event_loop().time()}\n")
            f.write(f"Tokens used: {response.tokens_used}\n\n")
            f.write("## AI-Generated Architecture Design\n\n")
            f.write(response.content)
        
        print(f"\n📁 Architecture saved to: {architecture_file}")
        print(f"📝 Content preview:")
        print("-" * 40)
        print(response.content[:300] + "..." if len(response.content) > 300 else response.content)
        print("-" * 40)
        
        return str(architecture_file)
        
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()
        return None


if __name__ == "__main__":
    result = asyncio.run(quick_architecture_generation())
    if result:
        print(f"\n🎉 Success! Architecture saved to: {result}")
    else:
        print("\n💥 Failed to generate architecture")
