[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "path-framework"
version = "1.0.0"
description = "PATH Framework - People-Agent Teams/Process/Technology for systematic software engineering"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Precocity Research Lab", email = "contact@precocityresearch.com"}
]
maintainers = [
    {name = "PATH Framework Team", email = "path@precocityresearch.com"}
]
keywords = ["ai", "agents", "software-engineering", "tdd", "devops", "operations", "human-ai-collaboration"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"

# Core dependencies
dependencies = [
    "asyncio-mqtt>=0.16.0",
    "httpx>=0.27.0",
    "pydantic>=2.7.0",
    "pydantic-settings>=2.3.0",
    "structlog>=24.1.0",
    "typer>=0.12.0",
    "rich>=13.7.0",
    "uvloop>=0.19.0",
]

# Optional dependencies for different use cases
[project.optional-dependencies]
# LLM providers
llm = [
    "openai>=1.35.0",
    "anthropic>=0.28.0",
    "ollama>=0.2.0",
]

# Development tools integration
dev-tools = [
    "gitpython>=3.1.0",
    "docker>=7.1.0",
    "kubernetes>=29.0.0",
    "boto3>=1.34.0",  # AWS
    "azure-identity>=1.16.0",  # Azure
    "google-cloud-core>=2.4.0",  # GCP
]

# Testing frameworks
testing = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "coverage>=7.5.0",
    "factory-boy>=3.3.0",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.20.0",
    "opentelemetry-api>=1.25.0",
    "opentelemetry-sdk>=1.25.0",
    "grafana-api>=1.0.3",
]

# Security and compliance
security = [
    "cryptography>=42.0.0",
    "pyjwt>=2.8.0",
    "bandit>=1.7.0",
    "safety>=3.2.0",
]

# Data processing and analysis
data = [
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "scikit-learn>=1.5.0",
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
]

# Web frameworks for UI/API
web = [
    "fastapi>=0.111.0",
    "uvicorn>=0.30.0",
    "jinja2>=3.1.0",
    "websockets>=12.0.0",
]

# Database integrations
database = [
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",  # PostgreSQL
    "redis>=5.0.0",
    "motor>=3.4.0",  # MongoDB async
]

# All optional dependencies
all = [
    "path-framework[llm,dev-tools,testing,monitoring,security,data,web,database]"
]

# Development dependencies
dev = [
    "path-framework[all]",
    "black>=24.4.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    "sphinx>=7.3.0",
    "sphinx-rtd-theme>=2.0.0",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
]

[project.urls]
Homepage = "https://github.com/precocityresearchlab/path_framework"
Documentation = "https://path-framework.readthedocs.io/"
Repository = "https://github.com/precocityresearchlab/path_framework.git"
Issues = "https://github.com/precocityresearchlab/path_framework/issues"
Changelog = "https://github.com/precocityresearchlab/path_framework/blob/main/RELEASE_NOTES.md"

[project.scripts]
path = "path_framework.cli:main"
path-agent = "path_framework.agents.cli:agent_main"
path-orchestrator = "path_framework.orchestrator.cli:orchestrator_main"

[tool.hatch.build.targets.wheel]
packages = ["path_framework"]

[tool.hatch.build.targets.sdist]
include = [
    "/path_framework",
    "/framework",
    "/templates",
    "/agents",
    "/examples",
    "/docs",
    "/tests",
]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

# MyPy type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "kubernetes.*",
    "boto3.*",
    "azure.*",
    "google.*",
    "prometheus_client.*",
    "grafana_api.*",
    "ollama.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=path_framework",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "requires_llm: Tests that require LLM API access",
    "requires_docker: Tests that require Docker",
    "requires_k8s: Tests that require Kubernetes",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["path_framework"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".tox",
    ".eggs",
    "*.egg",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]
